# -*- coding: utf-8 -*-
"""Untitled1 (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bRKxWxasO4nLlw0fyTJ3bmKGwF9qRKlA

Using tutorial from Breast Cancer Detection model.

Link: https://colab.research.google.com/github/goodboychan/chans_jupyter/blob/main/_notebooks/2020-07-28-01-Breast-Cancer-Detection-with-Machine-Learning.ipynb#scrollTo=8Dpzfo3dNVXV

Imports
"""

#Imports
import numpy as np
import pandas as pd
import sklearn
from sklearn import preprocessing
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import sys
import matplotlib
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split, KFold, cross_val_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score
from pandas.plotting import scatter_matrix

"""[Version Check]"""

#Print Versions
print('Python: {}'.format(sys.version))
print('Numpy: {}'.format(np.__version__))
print('Matplotlib: {}'.format(matplotlib.__version__))
print('Pandas: {}'.format(pd.__version__))
print('Scikit-learn: {}'.format(sklearn.__version__))

"""Uploading Dataset:"""

#Initialize Dataset
url = 'http://nrvis.com/data/mldata/pima-indians-diabetes.csv'
names = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness',
         'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Class']
df = pd.read_csv(url, names=names).replace('?', np.nan).dropna()

#Call
df.head()

##Using describe function to get different components of the data.
print(df.describe())

"""Splitting Dataset:"""

X = df.drop(['Class'], axis=1).to_numpy()
y = df['Class'].to_numpy()
#Split dataset into 70% train & 30% test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

"""Defining model & test options:"""

seed = 8
scoring = 'accuracy'

models = []
models.append(('KNN', KNeighborsClassifier(n_neighbors=15)))
models.append(('SVM', SVC(kernel='linear', gamma= 'scale')))

# Evaluate each model in turn
results = []
names = []
# Print CV results and accuracy rates
for name, model in models:
    kfold = KFold(n_splits=10, random_state=seed, shuffle=True)
    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring=scoring)
    results.append(cv_results)
    names.append(name)
    msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
    print(msg)

##Find and print predictions and precision rates
for name, model in models:
    model.fit(X_train, y_train)
    predictions = model.predict(X_test)
    print(name)
    print(accuracy_score(y_test, predictions))
    print(classification_report(y_test, predictions))

##Accuracy score for train & test using
##using rbf kernel
clf = SVC()
clf.fit(X_train, y_train)
train_accuracy = clf.score(X_train, y_train)
test_accuracy = clf.score(X_test, y_test)
print("train:", train_accuracy)
print("test:",test_accuracy)

##Change kernel to linear
##Takes a long time to load
clf = SVC(kernel='linear', gamma= 'scale', C = 12837)
clf.fit(X_train, y_train)
train_accuracy = clf.score(X_train, y_train)
test_accuracy = clf.score(X_test, y_test)
print("train:", train_accuracy)
print("test:",test_accuracy)

##Change kernel to polynomial
clf = SVC(kernel='poly')
clf.fit(X_train, y_train)
train_accuracy = clf.score(X_train, y_train)
test_accuracy = clf.score(X_test, y_test)
print("train:", train_accuracy)
print("test:",test_accuracy)

"""Using linear kernel gives best results.

Testing using sample values to get a binary result of 0, which is negative, or 1, which is positive.
"""

test1 = np.array([[3, 150, 75, 10, 52, 29.3, 0.759, 42,]])
test1 = test1.reshape(len(test1), -1)
att1 = clf.predict(test1)
print(att1)

test2 = np.array([[0, 212, 80, 0, 0, 36.5, 1.821, 64,]])
test2 = test2.reshape(len(test2), -1)
att2 = clf.predict(test2)
print(att2)

x  = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
y1 = [69.8, 70.02, 70.19, 71.69, 71.51, 74.48, 75.4, 73.7, 75.77, 75.41, 75.40, 75.42, 75.6, 74.5, 76.3, 75.2]
y2 = [76.18, 76.18, 76.18, 76.18, 76.18, 76.18, 76.18, 76.18, 76.18, 76.18, 76.18, 76.18, 76.18, 76.18, 76.18, 76.18]
plt.plot(x, y1, label="KNN")
plt.plot(x, y2, label="SVM")
plt.plot()

plt.xlabel("KNC Value")
plt.ylabel("Accuracy Rate")
plt.title("KNN & SVM Plot for Changing KNC value")
plt.legend()
plt.show()

